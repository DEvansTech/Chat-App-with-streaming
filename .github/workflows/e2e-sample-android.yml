name: e2e-sample-android

on:
  pull_request:
    branches:
      - develop
      - master
    types: [opened, synchronize]

jobs:
  test:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install node_modules
        id: installDeps
        run: yarn --frozen-lockfile && yarn bootstrap-ci
      - name: Install node_modules retry
        if: failure() && steps.installDeps.outcome == 'failure'
        run: yarn --frozen-lockfile && yarn bootstrap-ci

      - name: Use specific Java version for sdkmanager to work
        uses: joschi/setup-jdk@v2
        with:
          java-version: 'openjdk8'
          architecture: 'x64'

      - name: Build Android App
        id: buildApp
        run: yarn detox-sample-android:build

      - name: Build Android App retry
        if: failure() && steps.buildApp.outcome == 'failure'
        run: yarn detox-sample-android:build

      - name: Download Android Emulator Image
        run: |
          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install "system-images;android-29;default;x86_64"
          echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd --force --name Pixel_29_AOSP -d pixel -k 'system-images;android-29;default;x86_64'
          $ANDROID_HOME/emulator/emulator -list-avds

      - name: Launch Emulator
        timeout-minutes: 10
        continue-on-error: true
        run: |
          echo "Starting emulator"
          nohup $ANDROID_HOME/emulator/emulator -avd Pixel_29_AOSP --noaudio -gpu swiftshader_indirect -camera-back none -no-snapshot -no-window -no-boot-anim -nojni -memory 4000 -cores 2 &
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
          $ANDROID_HOME/platform-tools/adb devices
          echo "Emulator started"

      - name: Test
        id: detoxRun
        # Detox uses Espresso to choreograph steps in reaction to UI events, so we need to send a stream of taps.
        run: |
          $ANDROID_HOME/platform-tools/adb devices
          $ANDROID_HOME/platform-tools/adb shell settings put global window_animation_scale 0.0
          $ANDROID_HOME/platform-tools/adb shell settings put global transition_animation_scale 0.0
          $ANDROID_HOME/platform-tools/adb shell settings put global animator_duration_scale 0.0
          nohup sh -c "until false; do $ANDROID_HOME/platform-tools/adb shell input tap 100 800; sleep 0.2; done" &
          nohup sh -c "$ANDROID_HOME/platform-tools/adb logcat '*:D' > adb-log.txt" &
          yarn detox-sample-android:test --record-logs failing --record-videos failing

      - uses: actions/upload-artifact@v2
        if: failure() && steps.detoxRun.outcome == 'failure'
        with:
          name: detox-artifacts
          path: ./artifacts
